<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\FRDMKL25Z48M_DEMO\TWRKL25Z48M_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\FRDMKL25Z48M_DEMO\TWRKL25Z48M_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Jan 14 21:57:05 2015
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; tss::TSSControlFactory::createTSSControl(unsigned char) &rArr; tss::TSSASlider::TSSASlider(unsigned char) &rArr; tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SVC_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SysTick_Handler</a><BR>
 <LI><a href="#[28]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[29]">CMP0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[32]">DAC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[19]">DMA0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1a]">DMA1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1b]">DMA2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1c]">DMA3_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1e]">FTFA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[21]">I2C0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[20]">LLW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[35]">LPTimer_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1f]">LVD_LVW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[34]">MCG_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2f]">PIT_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[37]">PORTA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[38]">PORTD_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2e]">RTC_Seconds_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1d]">Reserved20_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[30]">Reserved39_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[36]">Reserved45_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[23]">SPI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_mkl25z4.o(i.SystemInit) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[2a]">TPM0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2b]">TPM1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2c]">TPM2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[46]">TSIL_MethodControl</a> from tss_sensortsil.o(i.TSIL_MethodControl) referenced from tss_sensortsil.o(.constdata)
 <LI><a href="#[43]">TSIL_SampleElectrode</a> from tss_sensortsil.o(i.TSIL_SampleElectrode) referenced 2 times from tss_sensor.o(.constdata)
 <LI><a href="#[55]">TSS_ASliderCalculatePosIIRFilter</a> from tss_asliderdecoder.o(i.TSS_ASliderCalculatePosIIRFilter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[48]">TSS_ASliderDecoder</a> from tss_asliderdecoder.o(i.TSS_ASliderDecoder) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[57]">TSS_ASliderTrendControl</a> from tss_asliderdecoder.o(i.TSS_ASliderTrendControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[56]">TSS_ASliderTrendThreshold</a> from tss_asliderdecoder.o(i.TSS_ASliderTrendThreshold) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4f]">TSS_DataCorruptionCheck</a> from tss_main.o(i.TSS_DataCorruptionCheck) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4a]">TSS_DecodersControl</a> from tss_main.o(i.TSS_DecodersControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[49]">TSS_InternalControlPrivateData</a> from tss_main.o(i.TSS_InternalControlPrivateData) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[5e]">TSS_KeyBasicDeltaNoiseAnalysisIIRControl</a> from tss_keydetectornormal.o(i.TSS_KeyBasicDeltaNoiseAnalysisIIRControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[5f]">TSS_KeyBasicElectrodeEval</a> from tss_keydetectornormal.o(i.TSS_KeyBasicElectrodeEval) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[60]">TSS_KeyBasicGetSystemDataContext</a> from tss_keydetectornormal.o(i.TSS_KeyBasicGetSystemDataContext) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[5a]">TSS_KeyBasicNegativeBaselineDrop</a> from tss_keydetectornormal.o(i.TSS_KeyBasicNegativeBaselineDrop) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[5d]">TSS_KeyBasicSensAutoCalibration</a> from tss_keydetectornormal.o(i.TSS_KeyBasicSensAutoCalibration) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[58]">TSS_KeyBasicStuckKeyControl</a> from tss_keydetectornormal.o(i.TSS_KeyBasicStuckKeyControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4b]">TSS_KeyDetectorCalculateIIRFilter</a> from tss_filters.o(i.TSS_KeyDetectorCalculateIIRFilter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4d]">TSS_KeyDetectorFillDeltaLogBuffer</a> from tss_keydetector.o(i.TSS_KeyDetectorFillDeltaLogBuffer) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4e]">TSS_KeyDetectorFillSignalLogBuffer</a> from tss_keydetector.o(i.TSS_KeyDetectorFillSignalLogBuffer) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[4c]">TSS_KeyDetectorInitPrevCapSample</a> from tss_filters.o(i.TSS_KeyDetectorInitPrevCapSample) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3c]">TSS_KeyDetectorRecalibrateElectrode</a> from tss_keydetector.o(i.TSS_KeyDetectorRecalibrateElectrode) referenced from tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules)
 <LI><a href="#[5b]">TSS_KeyDetectorRecalibrationRequest</a> from tss_keydetector.o(i.TSS_KeyDetectorRecalibrationRequest) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[59]">TSS_KeyDetectorResetStuckKeyCounter</a> from tss_keydetector.o(i.TSS_KeyDetectorResetStuckKeyCounter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[5c]">TSS_KeyDetectorSignalDivider</a> from tss_filters.o(i.TSS_KeyDetectorSignalDivider) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[52]">TSS_LowPowerConfig</a> from tss_main.o(i.TSS_LowPowerConfig) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[44]">TSS_SampleElectrodeLowE0</a> from tss_sensor.o(i.TSS_SampleElectrodeLowE0) referenced from tss_sensor.o(.constdata)
 <LI><a href="#[45]">TSS_SampleElectrodeLowE1</a> from tss_sensor.o(i.TSS_SampleElectrodeLowE1) referenced from tss_sensor.o(.constdata)
 <LI><a href="#[3d]">TSS_SensorInitCallback</a> from tss_sensor.o(i.TSS_SensorInitCallback) referenced from tss_sensor.o(i.TSS_SensorInit)
 <LI><a href="#[33]">TSS_TSI0Isr</a> from tss_sensortsil.o(i.TSS_TSI0Isr) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[50]">TSS_TriggerConfig</a> from tss_main.o(i.TSS_TriggerConfig) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[51]">TSS_TriggerControl</a> from tss_main.o(i.TSS_TriggerControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[54]">TSS_fOnInit</a> from main.o(i.TSS_fOnInit) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[25]">UART0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[26]">UART1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[27]">UART2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[31]">USB0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[40]">myFaultCallback(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char)</a> from main.o(i._Z15myFaultCallbackPN3tss9TSSSystemENS_14TSSSystemEventEh) referenced from main.o(i.main)
 <LI><a href="#[41]">myCallbackMovement(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)</a> from main.o(i._Z18myCallbackMovementPN3tss10TSSASliderENS0_12ASliderEventEh) referenced from main.o(i.main)
 <LI><a href="#[42]">myCallbackAllRelease(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)</a> from main.o(i._Z20myCallbackAllReleasePN3tss10TSSASliderENS0_12ASliderEventEh) referenced from main.o(i.main)
 <LI><a href="#[3f]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[3b]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[67]">tss::TSSASlider::onMovement(unsigned char)</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider10onMovementEh) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[61]">tss::TSSASlider::getCallbacks(void(***)(tss::TSSControl*, unsigned char, unsigned char))</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider12getCallbacksEPPPFvPNS_10TSSControlEhhE) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[66]">tss::TSSASlider::onAllRelease(unsigned char)</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider12onAllReleaseEh) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[65]">tss::TSSASlider::onInitialTouch(unsigned char)</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider14onInitialTouchEh) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[62]">tss::TSSASlider::callbackControl()</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider15callbackControlEv) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[63]">tss::TSSASlider::enable(tss::TSSControlFlag)</a> from tss_cpp_aslider.o(i._ZN3tss10TSSASlider6enableENS_14TSSControlFlagE) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[69]">tss::TSSSystem::getCallbacks(void(***)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char))</a> from tss_cpp.o(i._ZN3tss9TSSSystem12getCallbacksEPPPFvPS0_NS_14TSSSystemEventEhE) referenced from tss_cpp.o(.constdata__ZTVN3tss9TSSSystemE)
 <LI><a href="#[6a]">tss::TSSSystem::onFault(tss::TSSSystemEvent, unsigned char)</a> from tss_cpp.o(i._ZN3tss9TSSSystem7onFaultENS_14TSSSystemEventEh) referenced from tss_cpp.o(.constdata__ZTVN3tss9TSSSystemE)
 <LI><a href="#[3e]">tss::TSSSystem::~TSSSystem()</a> from tss_cpp.o(i._ZN3tss9TSSSystemD1Ev) referenced from tss_cpp.o(i._ZN3tss9TSSSystem12getTSSSystemEv)
 <LI><a href="#[64]">tss::TSSASlider::get(tss::TSSControlConfig) const</a> from tss_cpp_aslider.o(i._ZNK3tss10TSSASlider3getENS_16TSSControlConfigE) referenced from tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
 <LI><a href="#[68]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from tss_cpp.o(.constdata__ZTVN3tss10TSSControlE)
 <LI><a href="#[68]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from tss_cpp_arotary.o(.constdata__ZTVN3tss11TSSCallbackIPFvPNS_10TSSControlEhhEhEE)
 <LI><a href="#[68]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from tss_cpp.o(.constdata__ZTVN3tss11TSSCallbackIPFvPNS_9TSSSystemENS_14TSSSystemEventEhES3_EE)
 <LI><a href="#[6b]">__main</a> from __main.o(!!!main) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[47]">callbackControlHelper</a> from tss_cpp.o(i.callbackControlHelper) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[53]">callbackFaultHelper</a> from tss_cpp.o(i.callbackFaultHelper) referenced from tss_systemsetupdata.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[77]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[70]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[6d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[74]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[76]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[100]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[78]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tss::TSSControlFactory::createTSSControl(unsigned char) &rArr; tss::TSSASlider::TSSASlider(unsigned char) &rArr; tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[101]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[102]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl25z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorSignalDivider
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderTrendThreshold
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderDecoder
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderCalculatePosIIRFilter
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDeltaNoiseAnalysisIIRControl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
</UL>

<P><STRONG><a name="[108]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[dc]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[7f]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[82]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[83]"></a>__rt_SIGPVFN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[3f]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[109]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[10b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[88]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[71]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[85]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[84]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[86]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[8c]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[7e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[75]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8e]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[87]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[7a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8d]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[8b]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[89]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[8f]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[10f]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[94]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[111]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[97]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c8]"></a>InitDevices</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, board.o(i.InitDevices))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_fOnInit
</UL>

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mkl25z4.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemInit &rArr; sysinit &rArr; pll_init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdog_disable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>TSIL_HandleMeasurement</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tss_sensortsil.o(i.TSIL_HandleMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSIL_HandleMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>

<P><STRONG><a name="[9d]"></a>TSIL_InitLowPower</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tss_sensortsil.o(i.TSIL_InitLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSIL_InitLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[9b]"></a>TSIL_InitModule</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tss_sensortsil.o(i.TSIL_InitModule))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[9e]"></a>TSIL_InitPEN</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tss_sensortsil.o(i.TSIL_InitPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSIL_InitPEN
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[a0]"></a>TSIL_InitThresholds</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tss_sensortsil.o(i.TSIL_InitThresholds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSIL_InitThresholds
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[a1]"></a>TSIL_InitTrigger</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tss_sensortsil.o(i.TSIL_InitTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSIL_InitTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[46]"></a>TSIL_MethodControl</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, tss_sensortsil.o(i.TSIL_MethodControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TSIL_MethodControl &rArr; TSIL_Recalibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SetNSamples
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_Recalibrate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitTrigger
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitThresholds
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitPEN
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitModule
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitLowPower
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_sensortsil.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>TSIL_ReadCounter</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, tss_sensortsil.o(i.TSIL_ReadCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSIL_ReadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>

<P><STRONG><a name="[9f]"></a>TSIL_Recalibrate</STRONG> (Thumb, 762 bytes, Stack size 92 bytes, tss_sensortsil.o(i.TSIL_Recalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TSIL_Recalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[43]"></a>TSIL_SampleElectrode</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, tss_sensortsil.o(i.TSIL_SampleElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TSIL_SampleElectrode &rArr; TSIL_MethodControl &rArr; TSIL_Recalibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_ReadCounter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_HandleMeasurement
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>TSIL_SetNSamples</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tss_sensortsil.o(i.TSIL_SetNSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSIL_SetNSamples
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[55]"></a>TSS_ASliderCalculatePosIIRFilter</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tss_asliderdecoder.o(i.TSS_ASliderCalculatePosIIRFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_ASliderCalculatePosIIRFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SubUInt16WithUInt16ToSInt16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>TSS_ASliderDecoder</STRONG> (Thumb, 1108 bytes, Stack size 96 bytes, tss_asliderdecoder.o(i.TSS_ASliderDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TSS_ASliderDecoder &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>TSS_ASliderTrendControl</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tss_asliderdecoder.o(i.TSS_ASliderTrendControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_ASliderTrendControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>TSS_ASliderTrendThreshold</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tss_asliderdecoder.o(i.TSS_ASliderTrendThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_ASliderTrendThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>TSS_BrowseModules</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tss_main.o(i.TSS_BrowseModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateModules
</UL>

<P><STRONG><a name="[b2]"></a>TSS_CutSInt16ToSInt8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_CutSInt16ToSInt8))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDeltaNoiseAnalysisIIRControl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>

<P><STRONG><a name="[4f]"></a>TSS_DataCorruptionCheck</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tss_main.o(i.TSS_DataCorruptionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_DataCorruptionCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>TSS_DecodersControl</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tss_main.o(i.TSS_DecodersControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TSS_DecodersControl &rArr; TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>TSS_FaultEvaluation</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tss_main.o(i.TSS_FaultEvaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_FaultEvaluation
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[cc]"></a>TSS_GetASliderConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tss_asliderdecoder.o(i.TSS_GetASliderConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_GetASliderConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::enable(tss::TSSControlFlag)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::aslider_get_internal(unsigned short, const TSS_CSASlider*)
</UL>

<P><STRONG><a name="[d2]"></a>TSS_GetControlPrivateData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tss_main.o(i.TSS_GetControlPrivateData))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbackControlHelper
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSControlFactory::createTSSControl(unsigned char)
</UL>

<P><STRONG><a name="[d0]"></a>TSS_GetControlStruct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tss_main.o(i.TSS_GetControlStruct))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::TSSASlider(unsigned char)
</UL>

<P><STRONG><a name="[c6]"></a>TSS_GetSystemConfig</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, tss_main.o(i.TSS_GetSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSS_GetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TSI0Isr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::enable(tss::TSSSystemFlag)
</UL>

<P><STRONG><a name="[bd]"></a>TSS_IIRFilterEquation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tss_systemsetupdata.o(i.TSS_IIRFilterEquation))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateIIRFilter
</UL>

<P><STRONG><a name="[aa]"></a>TSS_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tss_main.o(i.TSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitRegisterArrays
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::TSSSystem()
</UL>

<P><STRONG><a name="[ab]"></a>TSS_InitInternalArrays</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tss_main.o(i.TSS_InitInternalArrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_InitInternalArrays &rArr; TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRestartElectrode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeMeasured
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[ac]"></a>TSS_InitRegisterArrays</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, tss_main.o(i.TSS_InitRegisterArrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_InitRegisterArrays
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[49]"></a>TSS_InternalControlPrivateData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tss_main.o(i.TSS_InternalControlPrivateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_InternalControlPrivateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>TSS_KeyBasicDeltaNoiseAnalysisIIRControl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicDeltaNoiseAnalysisIIRControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_KeyBasicDeltaNoiseAnalysisIIRControl &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>TSS_KeyBasicDetect</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_KeyBasicDetect &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeDebouncing
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorElectrodeStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[5f]"></a>TSS_KeyBasicElectrodeEval</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicElectrodeEval))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_KeyBasicElectrodeEval &rArr; TSS_KeyBasicDetect &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorReleaseElectrode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetSlowDCTrackerCounter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetShieldElectrodeReleaseStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetDCTrackerCounter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalibrate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>TSS_KeyBasicGetSystemDataContext</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicGetSystemDataContext))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>TSS_KeyBasicNegativeBaselineDrop</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicNegativeBaselineDrop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_KeyBasicNegativeBaselineDrop &rArr; TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>TSS_KeyBasicSensAutoCalibration</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicSensAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSS_KeyBasicSensAutoCalibration &rArr; TSS_KeyBasicEvaluateNoiseData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>TSS_KeyBasicStuckKeyControl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicStuckKeyControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSS_KeyBasicStuckKeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>TSS_KeyDetectorCalculateDelta</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorCalculateDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorCalculateDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SubUInt16WithUInt16ToSInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[4b]"></a>TSS_KeyDetectorCalculateIIRFilter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tss_filters.o(i.TSS_KeyDetectorCalculateIIRFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorCalculateIIRFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_IIRFilterEquation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>TSS_KeyDetectorCalibrate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[b5]"></a>TSS_KeyDetectorElectrodeStatusUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorElectrodeStatusUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
</UL>

<P><STRONG><a name="[4d]"></a>TSS_KeyDetectorFillDeltaLogBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorFillDeltaLogBuffer))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>TSS_KeyDetectorFillSignalLogBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorFillSignalLogBuffer))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>TSS_KeyDetectorGetDCTrackerCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetDCTrackerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[a8]"></a>TSS_KeyDetectorGetElectrodeEnablerStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetElectrodeEnablerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>

<P><STRONG><a name="[a9]"></a>TSS_KeyDetectorGetElectrodeGroupStatus</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetElectrodeGroupStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_DecodersControl
</UL>

<P><STRONG><a name="[b8]"></a>TSS_KeyDetectorGetShieldElectrodeReleaseStatus</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetShieldElectrodeReleaseStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_KeyDetectorGetShieldElectrodeReleaseStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[ba]"></a>TSS_KeyDetectorGetSlowDCTrackerCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetSlowDCTrackerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[ad]"></a>TSS_KeyDetectorInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[4c]"></a>TSS_KeyDetectorInitPrevCapSample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_KeyDetectorInitPrevCapSample))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>TSS_KeyDetectorMain</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, tss_keydetector.o(i.TSS_KeyDetectorMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_KeyDetectorMain &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_FaultEvaluation
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeMeasured
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorReleaseElectrode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorFaultDecoder
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorDCTrackerEvalExecution
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
</UL>

<P><STRONG><a name="[c3]"></a>TSS_KeyDetectorRecalibrateModules</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_KeyDetectorRecalibrateModules &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
</UL>

<P><STRONG><a name="[5b]"></a>TSS_KeyDetectorRecalibrationRequest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrationRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_KeyDetectorRecalibrationRequest &rArr; TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>TSS_KeyDetectorReleaseElectrode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorReleaseElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorReleaseElectrode
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[ae]"></a>TSS_KeyDetectorResetElectrode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeDebouncing
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicNegativeBaselineDrop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
</UL>

<P><STRONG><a name="[b4]"></a>TSS_KeyDetectorResetElectrodeDebouncing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrodeDebouncing))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>

<P><STRONG><a name="[b0]"></a>TSS_KeyDetectorResetElectrodeMeasured</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrodeMeasured))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[59]"></a>TSS_KeyDetectorResetStuckKeyCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetStuckKeyCounter))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>TSS_KeyDetectorRestartElectrode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorRestartElectrode))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>

<P><STRONG><a name="[5c]"></a>TSS_KeyDetectorSignalDivider</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tss_filters.o(i.TSS_KeyDetectorSignalDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorSignalDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>TSS_LowPowerConfig</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tss_main.o(i.TSS_LowPowerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSS_LowPowerConfig &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>TSS_SampleElectrodeLowE0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tss_sensor.o(i.TSS_SampleElectrodeLowE0))
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>TSS_SampleElectrodeLowE1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tss_sensor.o(i.TSS_SampleElectrodeLowE1))
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>TSS_SensorInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tss_sensor.o(i.TSS_SensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TriggerConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_LowPowerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>

<P><STRONG><a name="[3d]"></a>TSS_SensorInitCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tss_sensor.o(i.TSS_SensorInitCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSS_SensorInitCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(i.TSS_SensorInit)
</UL>
<P><STRONG><a name="[c4]"></a>TSS_SetASliderConfig</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, tss_asliderdecoder.o(i.TSS_SetASliderConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::enable(tss::TSSControlFlag)
</UL>

<P><STRONG><a name="[a6]"></a>TSS_SetControlElectrodesEnablers</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tss_main.o(i.TSS_SetControlElectrodesEnablers))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderDecoder
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
</UL>

<P><STRONG><a name="[cf]"></a>TSS_SetControlPrivateData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tss_main.o(i.TSS_SetControlPrivateData))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::TSSASlider(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>TSS_SetSystemConfig</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, tss_main.o(i.TSS_SetSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TSI0Isr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::enable(tss::TSSSystemFlag)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::set(tss::TSSSystemConfig, unsigned short)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFaultCallback(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char)
</UL>

<P><STRONG><a name="[a4]"></a>TSS_SubUInt16WithUInt16ToSInt16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_SubUInt16WithUInt16ToSInt16))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderCalculatePosIIRFilter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>

<P><STRONG><a name="[33]"></a>TSS_TSI0Isr</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tss_sensortsil.o(i.TSS_TSI0Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSS_TSI0Isr &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TSS_Task</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tss_main.o(i.TSS_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSS_Task &rArr; TSS_KeyDetectorMain &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_FaultEvaluation
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateModules
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>TSS_TriggerConfig</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tss_main.o(i.TSS_TriggerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSS_TriggerConfig &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>TSS_TriggerControl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tss_main.o(i.TSS_TriggerControl))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>TSS_fOnInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.TSS_fOnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_fOnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>myFaultCallback(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._Z15myFaultCallbackPN3tss9TSSSystemENS_14TSSSystemEventEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = myFaultCallback(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[41]"></a>myCallbackMovement(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i._Z18myCallbackMovementPN3tss10TSSASliderENS0_12ASliderEventEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myCallbackMovement(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[42]"></a>myCallbackAllRelease(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._Z20myCallbackAllReleasePN3tss10TSSASliderENS0_12ASliderEventEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myCallbackAllRelease(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[dd]"></a>led_init()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i._Z8led_initv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>tss::TSSASlider::onMovement(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider10onMovementEh))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[c9]"></a>tss::TSSASlider::regCallback(void(*)(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char), tss::TSSASlider::ASliderEvent)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i._ZN3tss10TSSASlider11regCallbackEPFvPS0_NS0_12ASliderEventEhES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tss::TSSASlider::regCallback(void(*)(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char), tss::TSSASlider::ASliderEvent) &rArr; tss::TSSCallback&lang;void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char&rang;::regCallback(void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSCallback&lang;void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char&rang;::regCallback(void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>tss::TSSASlider::getCallbacks(void(***)(tss::TSSControl*, unsigned char, unsigned char))</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider12getCallbacksEPPPFvPNS_10TSSControlEhhE))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[66]"></a>tss::TSSASlider::onAllRelease(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider12onAllReleaseEh))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[65]"></a>tss::TSSASlider::onInitialTouch(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider14onInitialTouchEh))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[62]"></a>tss::TSSASlider::callbackControl()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider15callbackControlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tss::TSSASlider::callbackControl()
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::getControlStruct() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[63]"></a>tss::TSSASlider::enable(tss::TSSControlFlag)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASlider6enableENS_14TSSControlFlagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::getControlStruct() const
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetASliderConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::TSSASlider(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[cd]"></a>tss::TSSASlider::TSSASlider(unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASliderC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tss::TSSASlider::TSSASlider(unsigned char) &rArr; tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::enable(tss::TSSControlFlag)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlPrivateData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetControlStruct
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSControlFactory::createTSSControl(unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>tss::TSSASlider::TSSASlider__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tss_cpp_aslider.o(i._ZN3tss10TSSASliderC1Eh), UNUSED)

<P><STRONG><a name="[d1]"></a>tss::TSSControlFactory::createTSSControl(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tss_cpp.o(i._ZN3tss17TSSControlFactory16createTSSControlEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tss::TSSControlFactory::createTSSControl(unsigned char) &rArr; tss::TSSASlider::TSSASlider(unsigned char) &rArr; tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::TSSASlider(unsigned char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetControlPrivateData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>tss::TSSSystem::getCallbacks(void(***)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char))</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tss_cpp.o(i._ZN3tss9TSSSystem12getCallbacksEPPPFvPS0_NS_14TSSSystemEventEhE))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp.o(.constdata__ZTVN3tss9TSSSystemE)
</UL>
<P><STRONG><a name="[ce]"></a>tss::TSSSystem::getTSSSystem()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tss_cpp.o(i._ZN3tss9TSSSystem12getTSSSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tss::TSSSystem::getTSSSystem() &rArr; tss::TSSSystem::TSSSystem() &rArr; tss::TSSSystem::enable(tss::TSSSystemFlag) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::TSSSystem()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbackFaultHelper
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::TSSASlider(unsigned char)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>tss::TSSSystem::callbackSysFaults(tss::TSSSystemEvent, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tss_cpp.o(i._ZN3tss9TSSSystem17callbackSysFaultsENS_14TSSSystemEventEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tss::TSSSystem::callbackSysFaults(tss::TSSSystemEvent, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbackFaultHelper
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::TSSSystem()
</UL>

<P><STRONG><a name="[d8]"></a>tss::TSSSystem::set(tss::TSSSystemConfig, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tss_cpp.o(i._ZN3tss9TSSSystem3setENS_15TSSSystemConfigEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tss::TSSSystem::set(tss::TSSSystemConfig, unsigned short) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::TSSSystem()
</UL>

<P><STRONG><a name="[d9]"></a>tss::TSSSystem::enable(tss::TSSSystemFlag)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tss_cpp.o(i._ZN3tss9TSSSystem6enableENS_13TSSSystemFlagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tss::TSSSystem::enable(tss::TSSSystemFlag) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::TSSSystem()
</UL>

<P><STRONG><a name="[6a]"></a>tss::TSSSystem::onFault(tss::TSSSystemEvent, unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tss_cpp.o(i._ZN3tss9TSSSystem7onFaultENS_14TSSSystemEventEh))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp.o(.constdata__ZTVN3tss9TSSSystemE)
</UL>
<P><STRONG><a name="[d6]"></a>tss::TSSSystem::TSSSystem()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tss_cpp.o(i._ZN3tss9TSSSystemC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tss::TSSSystem::TSSSystem() &rArr; tss::TSSSystem::enable(tss::TSSSystemFlag) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::enable(tss::TSSSystemFlag)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::set(tss::TSSSystemConfig, unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::callbackSysFaults(tss::TSSSystemEvent, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
</UL>

<P><STRONG><a name="[113]"></a>tss::TSSSystem::TSSSystem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tss_cpp.o(i._ZN3tss9TSSSystemC1Ev), UNUSED)

<P><STRONG><a name="[3e]"></a>tss::TSSSystem::~TSSSystem()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tss_cpp.o(i._ZN3tss9TSSSystemD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp.o(i._ZN3tss9TSSSystem12getTSSSystemEv)
</UL>
<P><STRONG><a name="[114]"></a>tss::TSSSystem::~TSSSystem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tss_cpp.o(i._ZN3tss9TSSSystemD1Ev), UNUSED)

<P><STRONG><a name="[cb]"></a>tss::TSSASlider::getControlStruct() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tss_cpp_aslider.o(i._ZNK3tss10TSSASlider16getControlStructEv))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::get(tss::TSSControlConfig) const
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::enable(tss::TSSControlFlag)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::callbackControl()
</UL>

<P><STRONG><a name="[64]"></a>tss::TSSASlider::get(tss::TSSControlConfig) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tss_cpp_aslider.o(i._ZNK3tss10TSSASlider3getENS_16TSSControlConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tss::TSSASlider::get(tss::TSSControlConfig) const &rArr; tss::aslider_get_internal(unsigned short, const TSS_CSASlider*) &rArr; TSS_GetASliderConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::getControlStruct() const
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::aslider_get_internal(unsigned short, const TSS_CSASlider*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_cpp_aslider.o(.constdata__ZTVN3tss10TSSASliderE)
</UL>
<P><STRONG><a name="[d3]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSControlFactory::createTSSControl(unsigned char)
</UL>

<P><STRONG><a name="[9a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tss_cpp_arotary.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::aslider_get_internal(unsigned short, const TSS_CSASlider*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorFaultDecoder
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_atexit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
</UL>

<P><STRONG><a name="[73]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[d5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
</UL>

<P><STRONG><a name="[68]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tss_cpp_arotary.o(.constdata__ZTVN3tss11TSSCallbackIPFvPNS_10TSSControlEhhEhEE)
<LI> tss_cpp.o(.constdata__ZTVN3tss10TSSControlE)
<LI> tss_cpp.o(.constdata__ZTVN3tss11TSSCallbackIPFvPNS_9TSSSystemENS_14TSSSystemEventEhES3_EE)
</UL>
<P><STRONG><a name="[47]"></a>callbackControlHelper</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tss_cpp.o(i.callbackControlHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = callbackControlHelper
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetControlPrivateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>callbackFaultHelper</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tss_cpp.o(i.callbackFaultHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = callbackFaultHelper &rArr; tss::TSSSystem::getTSSSystem() &rArr; tss::TSSSystem::TSSSystem() &rArr; tss::TSSSystem::enable(tss::TSSSystemFlag) &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::callbackSysFaults(tss::TSSSystemEvent, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>clk_out_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysinit_kl25.o(i.clk_out_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; tss::TSSControlFactory::createTSSControl(unsigned char) &rArr; tss::TSSASlider::TSSASlider(unsigned char) &rArr; tss::TSSASlider::enable(tss::TSSControlFlag) &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSSystem::getTSSSystem()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSControlFactory::createTSSControl(unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSCallback&lang;void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent&rang;::regCallback(void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::regCallback(void(*)(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char), tss::TSSASlider::ASliderEvent)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[df]"></a>pll_init</STRONG> (Thumb, 738 bytes, Stack size 56 bytes, mcg_kl25.o(i.pll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pll_init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[99]"></a>sysinit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sysinit_kl25.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sysinit &rArr; pll_init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[98]"></a>wdog_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdog_kl25.o(i.wdog_disable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ca]"></a>tss::TSSCallback&lang;void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char&rang;::regCallback(void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main.o(t._ZN3tss11TSSCallbackIPFvPNS_10TSSControlEhhEhE11regCallbackES4_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tss::TSSCallback&lang;void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char&rang;::regCallback(void(*)(tss::TSSControl*, unsigned char, unsigned char), unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::regCallback(void(*)(tss::TSSASlider*, tss::TSSASlider::ASliderEvent, unsigned char), tss::TSSASlider::ASliderEvent)
</UL>

<P><STRONG><a name="[de]"></a>tss::TSSCallback&lang;void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent&rang;::regCallback(void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main.o(t._ZN3tss11TSSCallbackIPFvPNS_9TSSSystemENS_14TSSSystemEventEhES3_E11regCallbackES5_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tss::TSSCallback&lang;void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent&rang;::regCallback(void(*)(tss::TSSSystem*, tss::TSSSystemEvent, unsigned char), tss::TSSSystemEvent)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d4]"></a>tss::aslider_get_internal(unsigned short, const TSS_CSASlider*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tss_cpp_aslider.o(i._ZN3tss20aslider_get_internalEtPK13TSS_CSASlider))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tss::aslider_get_internal(unsigned short, const TSS_CSASlider*) &rArr; TSS_GetASliderConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetASliderConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tss::TSSASlider::get(tss::TSSControlConfig) const
</UL>

<P><STRONG><a name="[c1]"></a>TSS_KeyDetectorDCTrackerEvalExecution</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorDCTrackerEvalExecution))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[be]"></a>TSS_KeyDetectorFaultDecoder</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, tss_keydetector.o(i.TSS_KeyDetectorFaultDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_KeyDetectorFaultDecoder &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[3c]"></a>TSS_KeyDetectorRecalibrateElectrode</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrateElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRestartElectrode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrationRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules)
</UL>
<P><STRONG><a name="[bc]"></a>TSS_KeyBasicEvaluateNoiseData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicEvaluateNoiseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_KeyBasicEvaluateNoiseData &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
</UL>

<P><STRONG><a name="[3b]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
